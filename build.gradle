plugins {
    id "java"
    id "application"
    id "jacoco"
    id "antlr"
    id "idea"
    id "com.adarshr.test-logger" version "2.0.0"
}
defaultTasks 'clean', 'run'

repositories {
    mavenCentral()
}
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
repositories {
    flatDir {
        dirs 'jar'
    }
}

dependencies {
    antlr "org.antlr:antlr:3.5.2"
    implementation "com.google.guava:guava:28.0-jre"
    implementation "org.antlr:antlr-runtime:3.5.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    implementation "org.piccolo2d:piccolo2d-core:3.0.1"
    implementation "org.piccolo2d:piccolo2d-extras:3.0.1"
    implementation name: "microPIUPK"
    implementation "org.graphstream:gs-core:1.3"
}

application {
    mainClassName = "eu.telecomnancy.pcl.Main"
}
task DisplayTable(type: JavaExec) {
    group = "Utils"
    applicationName = 'DisplayTable'
    classpath = sourceSets.main.runtimeClasspath
    main = 'eu.telecomnancy.pcl.debug.DisplayTable'
}

task DisplayGraph(type: JavaExec) {
    group = "Utils"
    applicationName = 'DisplayGraph'
    classpath = sourceSets.main.runtimeClasspath
    main = 'eu.telecomnancy.pcl.debug.DisplayGraph'
}

task runQuick(type: JavaExec) {
    group = "Utils"
    applicationName = 'QuickRun'
    classpath = sourceSets.main.runtimeClasspath
    main = "eu.telecomnancy.pcl.Main"
    args = ["--quick","src/main/resources/asm.a60"]
}

run {
    applicationName = 'PCL'
    classpath = sourceSets.main.runtimeClasspath
    main = "eu.telecomnancy.pcl.Main"
    args = ["--debug","--resource","--debug-compiler","asm.a60"]
}

file('src/main/resources/semanticsError').listFiles().each {
    def targetName ->
        def fileName = targetName.toURI().toString().replaceAll(".*/([^/?]+).*", "\$1")
        tasks.register("semanticsError-${fileName}", JavaExec) {
            group = "semantic_errors"
            applicationName = 'semanticsError'
            classpath = sourceSets.main.runtimeClasspath
            main = 'eu.telecomnancy.pcl.Main'
            args = ["${targetName}"]
        }
}

file('src/main/resources').listFiles().each {
    def targetName ->
        if (targetName.toString().endsWith(".a60")){
            def fileName = targetName.toURI().toString().replaceAll(".*/([^/?]+).*", "\$1")
            tasks.register("simple-example-${fileName}", JavaExec) {
                group = "simple_examples"
                applicationName = 'simpleExample'
                classpath = sourceSets.main.runtimeClasspath
                main = 'eu.telecomnancy.pcl.Main'
                args = ["${fileName}","--resource","--launch"]
            }
        }
}

file('examples').listFiles().each {
    def targetName ->
        if (targetName.toString().endsWith(".a60")){
            def fileName = targetName.toURI().toString().replaceAll(".*/([^/?]+).*", "\$1")
            tasks.register("real-example-${fileName}", JavaExec) {
                group = "real_examples"
                applicationName = 'simpleExample'
                classpath = sourceSets.main.runtimeClasspath
                main = 'eu.telecomnancy.pcl.Main'
                args = ["examples/${fileName}","--launch"]
            }
        }
}


task ExecutionHelp(type: JavaExec) {
    group = "Utils"
    applicationName = 'Help'
    classpath = sourceSets.main.runtimeClasspath
    main = "eu.telecomnancy.pcl.Main"
    args = ["--help"]
}


sourceSets {
    main {
        resources {
            srcDirs = ["${projectDir}/src/main/resources", "${projectDir}/asm"]
        }
        antlr {
            srcDirs = ["${projectDir}/grammar"]
        }
    }
    test {
        resources {
            srcDirs = ["${projectDir}/src/test/resources", "${projectDir}/asm"]
        }
    }
}
generateGrammarSource {
    outputDirectory = new File("${buildDir}/generated-src/antlr/main/eu/telecomnancy/pcl/antlr")
}

compileJava {
    dependsOn generateGrammarSource
    source += "${buildDir}/generated-src/antlr/main"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
        maxHeapSize = "1G"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        showExceptions true
        showCauses true
        showStackTraces true
    }
    finalizedBy(jacocoTestReport)
}

jar {
    archiveClassifier.set("sources")
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Main-Class": project.getProperty("mainClassName")
        )
    }
    project.archivesBaseName = "PCL_RELEASE"
}

task fatJar(type: Jar) {
    group = "Utils"
    archiveClassifier.set("all")
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Main-Class": project.getProperty("mainClassName")
        )
    }
    project.archivesBaseName = "PCL_RELEASE"
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
